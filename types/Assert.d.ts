export default class Assert {
    static lang: any;
    static lang_zh_cn: {
        typeNotEqual: string;
        notSameObject: string;
        info: string;
        startTest: string;
        notUseAssert: string;
        millisecond: string;
        second: string;
        minute: string;
        successDesc: string;
        positionDesc: string;
        failedDesc: string;
        testEndDesc: string;
        exceptionDesc: string;
        notUseAssertDesc: string;
    };
    static lang_en_us: {
        typeNotEqual: string;
        notSameObject: string;
        info: string;
        startTest: string;
        notUseAssert: string;
        millisecond: string;
        second: string;
        minute: string;
        successDesc: string;
        positionDesc: string;
        failedDesc: string;
        testEndDesc: string;
        exceptionDesc: string;
        notUseAssertDesc: string;
    };
    static run(className: any, ...args: any[]): void;
    static setLang(_lang: any): void;
    static equal(expected: any, actual: any, desc?: string): void;
    static notEqual(expected: any, actual: any, desc?: string): void;
    static strongEqual(expected: any, actual: any, desc?: string): void;
    static strongNotEqual(expected: any, actual: any, desc?: string): void;
    static same(expected: any, actual: any, desc?: string): void;
    static notSame(expected: any, actual: any, desc?: string): void;
    static isTrue(actual: any, desc?: string): void;
    static isFalse(actual: any, desc?: string): void;
    static isEmpty(actual: any, desc?: string): void;
    static isNotEmpty(actual: any, desc?: string): void;
    static isNull(actual: any, desc?: string): void;
    static isNotNull(actual: any, desc?: string): void;
    static isBool(actual: any, desc?: string): void;
    static isUndefined(actual: any, desc?: string): void;
    static isNotUndefined(actual: any, desc?: string): void;
    static isArray(actual: any, desc?: string): void;
    static isObject(actual: any, desc?: string): void;
    static isString(actual: any, desc?: string): void;
    static isNumber(actual: any, desc?: string): void;
    static success(desc?: string): void;
    static fail(desc?: string): void;
    private static _isArray;
    private static showResult;
}
